syntax = "proto3";

package puncher;

service PuncherService {
	rpc AddListing (AddListingRequest) returns (AddListingResponse);
	rpc RemoveListing (RemoveListingRequest) returns (RemoveListingResponse);
	rpc GetListings (GetListingsRequest) returns (GetListingsResponse);
	
	rpc Ping (PingRequest) returns (PingResponse);
	rpc CreateSession (CreateSessionRequest) returns (CreateSessionResponse);
	rpc EndSession (EndSessionRequest) returns (EndSessionResponse);
	
	rpc ForwardJoin (ForwardJoinRequest) returns (ForwardJoinResponse);
}

service PeerService {
	rpc Join (JoinRequest) returns (JoinResponse);

	rpc Punch (PunchRequest) returns (PunuchResponse);

	rpc Proxy (ProxyRequest) returns (ProxyResponse);
}

// -- LISTINGS -- //

message ListingNoID {
	string name = 1;
}

message Listing {
	ListingNoID listing_no_id = 1;
	bytes id = 2;
}


// -------- MESSAGES -------- //

// ---- Server ---- //

// -- AddListing --
message AddListingRequest {
	ListingNoID listing = 1;
	bytes session_id = 2;
}

message AddListingResponse {
	bytes listing_id = 1;
}


// -- RemoveListing --
message RemoveListingRequest {
	bytes session_id = 1;
}

message RemoveListingResponse {}


// -- GetListing --
message GetListingsRequest {}

message GetListingsResponse {
	repeated Listing listings = 2;
}


// -- CreateSession --
message CreateSessionRequest {}

message CreateSessionResponse {
	bytes session_id = 1;
}


// -- EndSession --
message EndSessionRequest {
	bytes session_id = 1;
}

message EndSessionResponse {}


// -- Ping --
message PingRequest {
	bytes session_id = 1;
}

message PingResponse {}


// -- ForwardJoin --
message ForwardJoinRequest {
	bytes session_id = 1;
	bytes target_listing_id = 2;
	TunnelRequest request = 3;
}

message ForwardJoinResponse {}

// ---- Client ---- //

// -- Join --
message JoinRequest {}

message JoinResponse {}


// -- Punch --
message PunchRequest {
	string ip = 1;
	uint32 port = 2;
}

message PunchResponse {}

// -- Proxy --
message ProxyRequest {
	string proxy_ip = 1;
	uint32 proxy_port = 2;
}

message ProxyResponse {}